//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ViewController`, and contains static references to 1 segues.
    struct viewController {
      /// Segue identifier `embedPageVIew`.
      static let embedPageVIew: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, OnboardingPageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "embedPageVIew")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `embedPageVIew`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embedPageVIew(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, OnboardingPageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.embedPageVIew, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Dashboard`.
    static let dashboard = _R.storyboard.dashboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Dashboard", bundle: ...)`
    static func dashboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dashboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Color`.
    static let color = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color")
    /// Color `Sub_content`.
    static let sub_content = Rswift.ColorResource(bundle: R.hostingBundle, name: "Sub_content")
    /// Color `content_text`.
    static let content_text = Rswift.ColorResource(bundle: R.hostingBundle, name: "content_text")
    /// Color `skip`.
    static let skip = Rswift.ColorResource(bundle: R.hostingBundle, name: "skip")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Sub_content", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func sub_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.sub_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "content_text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func content_text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.content_text, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "skip", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func skip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.skip, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Sub_content", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func sub_content(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.sub_content.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "content_text", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func content_text(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.content_text.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "skip", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func skip(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.skip.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 19 images.
  struct image {
    /// Image `Account`.
    static let account = Rswift.ImageResource(bundle: R.hostingBundle, name: "Account")
    /// Image `Favourite`.
    static let favourite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favourite")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `Shopping cart`.
    static let shoppingCart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shopping cart")
    /// Image `avatar`.
    static let avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar")
    /// Image `cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `help`.
    static let help = Rswift.ImageResource(bundle: R.hostingBundle, name: "help")
    /// Image `logOut`.
    static let logOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "logOut")
    /// Image `login`.
    static let login = Rswift.ImageResource(bundle: R.hostingBundle, name: "login")
    /// Image `mix_fruit_png_11`.
    static let mix_fruit_png_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mix_fruit_png_11")
    /// Image `myOrders`.
    static let myOrders = Rswift.ImageResource(bundle: R.hostingBundle, name: "myOrders")
    /// Image `onboardingStep1`.
    static let onboardingStep1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingStep1")
    /// Image `order`.
    static let order = Rswift.ImageResource(bundle: R.hostingBundle, name: "order")
    /// Image `rate`.
    static let rate = Rswift.ImageResource(bundle: R.hostingBundle, name: "rate")
    /// Image `setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `step2`.
    static let step2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "step2")
    /// Image `step3`.
    static let step3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "step3")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Account", bundle: ..., traitCollection: ...)`
    static func account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Favourite", bundle: ..., traitCollection: ...)`
    static func favourite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favourite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shopping cart", bundle: ..., traitCollection: ...)`
    static func shoppingCart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingCart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar", bundle: ..., traitCollection: ...)`
    static func avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help", bundle: ..., traitCollection: ...)`
    static func help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logOut", bundle: ..., traitCollection: ...)`
    static func logOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logOut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login", bundle: ..., traitCollection: ...)`
    static func login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mix_fruit_png_11", bundle: ..., traitCollection: ...)`
    static func mix_fruit_png_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mix_fruit_png_11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myOrders", bundle: ..., traitCollection: ...)`
    static func myOrders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myOrders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingStep1", bundle: ..., traitCollection: ...)`
    static func onboardingStep1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingStep1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order", bundle: ..., traitCollection: ...)`
    static func order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rate", bundle: ..., traitCollection: ...)`
    static func rate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "step2", bundle: ..., traitCollection: ...)`
    static func step2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.step2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "step3", bundle: ..., traitCollection: ...)`
    static func step3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.step3, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `header`.
    static let header: Rswift.ReuseIdentifier<TableViewCell> = Rswift.ReuseIdentifier(identifier: "header")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.myAccountsViewControllers` struct is generated, and contains static references to 8 localization keys.
    struct myAccountsViewControllers {
      /// Value: Favourites
      static let farourites = Rswift.StringResource(key: "farourites", tableName: "MyAccountsViewControllers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Help
      static let help = Rswift.StringResource(key: "help", tableName: "MyAccountsViewControllers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log Out
      static let logOut = Rswift.StringResource(key: "logOut", tableName: "MyAccountsViewControllers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Orders
      static let myOrders = Rswift.StringResource(key: "myOrders", tableName: "MyAccountsViewControllers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My cart
      static let myCart = Rswift.StringResource(key: "myCart", tableName: "MyAccountsViewControllers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rate Us
      static let rateUs = Rswift.StringResource(key: "rateUs", tableName: "MyAccountsViewControllers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Refer a Friend
      static let share = Rswift.StringResource(key: "share", tableName: "MyAccountsViewControllers", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settings = Rswift.StringResource(key: "settings", tableName: "MyAccountsViewControllers", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Favourites
      static func farourites(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("farourites", tableName: "MyAccountsViewControllers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MyAccountsViewControllers", preferredLanguages: preferredLanguages) else {
          return "farourites"
        }

        return NSLocalizedString("farourites", tableName: "MyAccountsViewControllers", bundle: bundle, comment: "")
      }

      /// Value: Help
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help", tableName: "MyAccountsViewControllers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MyAccountsViewControllers", preferredLanguages: preferredLanguages) else {
          return "help"
        }

        return NSLocalizedString("help", tableName: "MyAccountsViewControllers", bundle: bundle, comment: "")
      }

      /// Value: Log Out
      static func logOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logOut", tableName: "MyAccountsViewControllers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MyAccountsViewControllers", preferredLanguages: preferredLanguages) else {
          return "logOut"
        }

        return NSLocalizedString("logOut", tableName: "MyAccountsViewControllers", bundle: bundle, comment: "")
      }

      /// Value: My Orders
      static func myOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myOrders", tableName: "MyAccountsViewControllers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MyAccountsViewControllers", preferredLanguages: preferredLanguages) else {
          return "myOrders"
        }

        return NSLocalizedString("myOrders", tableName: "MyAccountsViewControllers", bundle: bundle, comment: "")
      }

      /// Value: My cart
      static func myCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myCart", tableName: "MyAccountsViewControllers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MyAccountsViewControllers", preferredLanguages: preferredLanguages) else {
          return "myCart"
        }

        return NSLocalizedString("myCart", tableName: "MyAccountsViewControllers", bundle: bundle, comment: "")
      }

      /// Value: Rate Us
      static func rateUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rateUs", tableName: "MyAccountsViewControllers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MyAccountsViewControllers", preferredLanguages: preferredLanguages) else {
          return "rateUs"
        }

        return NSLocalizedString("rateUs", tableName: "MyAccountsViewControllers", bundle: bundle, comment: "")
      }

      /// Value: Refer a Friend
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share", tableName: "MyAccountsViewControllers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MyAccountsViewControllers", preferredLanguages: preferredLanguages) else {
          return "share"
        }

        return NSLocalizedString("share", tableName: "MyAccountsViewControllers", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", tableName: "MyAccountsViewControllers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MyAccountsViewControllers", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", tableName: "MyAccountsViewControllers", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.onboardingChildViewController` struct is generated, and contains static references to 9 localization keys.
    struct onboardingChildViewController {
      /// en translation:  Delivery Arived
      ///
      /// Locales: en, ja
      static let thirdScreenContent = Rswift.StringResource(key: "thirdScreenContent", tableName: "OnboardingChildViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Delivery on the way
      ///
      /// Locales: en, ja
      static let secondScreenContent = Rswift.StringResource(key: "secondScreenContent", tableName: "OnboardingChildViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: E Shopping
      ///
      /// Locales: en, ja
      static let firstScreenContent = Rswift.StringResource(key: "firstScreenContent", tableName: "OnboardingChildViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Explore  top organic fruits & grab them
      ///
      /// Locales: en, ja
      static let firstScreenDescription = Rswift.StringResource(key: "firstScreenDescription", tableName: "OnboardingChildViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Get Started
      ///
      /// Locales: en, ja
      static let getStarted = Rswift.StringResource(key: "getStarted", tableName: "OnboardingChildViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Get your order by speed delivery
      ///
      /// Locales: en, ja
      static let secondScreenDescription = Rswift.StringResource(key: "secondScreenDescription", tableName: "OnboardingChildViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, ja
      static let next = Rswift.StringResource(key: "next", tableName: "OnboardingChildViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Order is arrived at your Place
      ///
      /// Locales: en, ja
      static let thirdScreenDescription = Rswift.StringResource(key: "thirdScreenDescription", tableName: "OnboardingChildViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, ja
      static let skip = Rswift.StringResource(key: "skip", tableName: "OnboardingChildViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)

      /// en translation:  Delivery Arived
      ///
      /// Locales: en, ja
      static func thirdScreenContent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thirdScreenContent", tableName: "OnboardingChildViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OnboardingChildViewController", preferredLanguages: preferredLanguages) else {
          return "thirdScreenContent"
        }

        return NSLocalizedString("thirdScreenContent", tableName: "OnboardingChildViewController", bundle: bundle, comment: "")
      }

      /// en translation: Delivery on the way
      ///
      /// Locales: en, ja
      static func secondScreenContent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("secondScreenContent", tableName: "OnboardingChildViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OnboardingChildViewController", preferredLanguages: preferredLanguages) else {
          return "secondScreenContent"
        }

        return NSLocalizedString("secondScreenContent", tableName: "OnboardingChildViewController", bundle: bundle, comment: "")
      }

      /// en translation: E Shopping
      ///
      /// Locales: en, ja
      static func firstScreenContent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstScreenContent", tableName: "OnboardingChildViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OnboardingChildViewController", preferredLanguages: preferredLanguages) else {
          return "firstScreenContent"
        }

        return NSLocalizedString("firstScreenContent", tableName: "OnboardingChildViewController", bundle: bundle, comment: "")
      }

      /// en translation: Explore  top organic fruits & grab them
      ///
      /// Locales: en, ja
      static func firstScreenDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstScreenDescription", tableName: "OnboardingChildViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OnboardingChildViewController", preferredLanguages: preferredLanguages) else {
          return "firstScreenDescription"
        }

        return NSLocalizedString("firstScreenDescription", tableName: "OnboardingChildViewController", bundle: bundle, comment: "")
      }

      /// en translation: Get Started
      ///
      /// Locales: en, ja
      static func getStarted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("getStarted", tableName: "OnboardingChildViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OnboardingChildViewController", preferredLanguages: preferredLanguages) else {
          return "getStarted"
        }

        return NSLocalizedString("getStarted", tableName: "OnboardingChildViewController", bundle: bundle, comment: "")
      }

      /// en translation: Get your order by speed delivery
      ///
      /// Locales: en, ja
      static func secondScreenDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("secondScreenDescription", tableName: "OnboardingChildViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OnboardingChildViewController", preferredLanguages: preferredLanguages) else {
          return "secondScreenDescription"
        }

        return NSLocalizedString("secondScreenDescription", tableName: "OnboardingChildViewController", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, ja
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", tableName: "OnboardingChildViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OnboardingChildViewController", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", tableName: "OnboardingChildViewController", bundle: bundle, comment: "")
      }

      /// en translation: Order is arrived at your Place
      ///
      /// Locales: en, ja
      static func thirdScreenDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thirdScreenDescription", tableName: "OnboardingChildViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OnboardingChildViewController", preferredLanguages: preferredLanguages) else {
          return "thirdScreenDescription"
        }

        return NSLocalizedString("thirdScreenDescription", tableName: "OnboardingChildViewController", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, ja
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("skip", tableName: "OnboardingChildViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OnboardingChildViewController", preferredLanguages: preferredLanguages) else {
          return "skip"
        }

        return NSLocalizedString("skip", tableName: "OnboardingChildViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try dashboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct dashboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DashboardViewController

      let bundle = R.hostingBundle
      let dashboardViewController = StoryboardViewControllerResource<DashboardViewController>(identifier: "DashboardViewController")
      let myAccountsViewController = StoryboardViewControllerResource<MyAccountsViewController>(identifier: "MyAccountsViewController")
      let name = "Dashboard"

      func dashboardViewController(_: Void = ()) -> DashboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardViewController)
      }

      func myAccountsViewController(_: Void = ()) -> MyAccountsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAccountsViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Account", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Account' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Favourite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Favourite' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shopping cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shopping cart' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.dashboard().dashboardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardViewController' could not be loaded from storyboard 'Dashboard' as 'DashboardViewController'.") }
        if _R.storyboard.dashboard().myAccountsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAccountsViewController' could not be loaded from storyboard 'Dashboard' as 'MyAccountsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "mix_fruit_png_11", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mix_fruit_png_11' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"
      let onboardingChildViewController = StoryboardViewControllerResource<OnboardingChildViewController>(identifier: "OnboardingChildViewController")
      let onboardingPageViewController = StoryboardViewControllerResource<OnboardingPageViewController>(identifier: "OnboardingPageViewController")

      func onboardingChildViewController(_: Void = ()) -> OnboardingChildViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingChildViewController)
      }

      func onboardingPageViewController(_: Void = ()) -> OnboardingPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingPageViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "onboardingStep1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'onboardingStep1' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Sub_content", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Sub_content' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "content_text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'content_text' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "skip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'skip' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().onboardingChildViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingChildViewController' could not be loaded from storyboard 'Main' as 'OnboardingChildViewController'.") }
        if _R.storyboard.main().onboardingPageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingPageViewController' could not be loaded from storyboard 'Main' as 'OnboardingPageViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
